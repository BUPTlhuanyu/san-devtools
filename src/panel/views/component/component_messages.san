<template>
    <div class="messages-wrapper" style="{{displayStyle}}">
        <input type="hidden" value="{{cid}}" />
        <div class="messages {{hidden[i] ? 'hidden' : ''}}" s-for="m, i in messages">
            <div class="funcName">{{m.name}}</div>
            <pre><code class="javascript">{{m.funcStr}}</code></pre>
        </div>
    </div>
</template>

<script>
import san, {DataTypes} from 'san';
import hljs from 'highlight.js';
import 'highlight.js/styles/default.css';
import prettyFast from 'pretty-fast';

let getMessages = cid => ({
    messages: (() => {
        let messagesFuncStr = {};
        let messagesFunc = document.getElementById(
            cid).__san_component__.messages;
        for (let m in messagesFunc) {
            messagesFuncStr[m] = messagesFunc[m].toString();
        }
        return messagesFuncStr;
    })()
});

function generateMessagesInfo(data) {
    let messages = [];
    let originMessages = data.messages;
    for (let m in originMessages) {
        let pretty = prettyFast(originMessages[m], {
            url: 'test.js',
            indent: '  '
        });
        messages.push({
            name: m,
            funcStr: pretty.code
        });
    }
    return messages;
}

export default {

    initData() {
        return {
            cid: '',
            shown: true,
            hidden: [],
            filterText: ''
        }
    },

    dataTypes: {
        cid: DataTypes.string,
        shown: DataTypes.bool,
        messages: DataTypes.arrayOf(DataTypes.object),
        hidden: DataTypes.arrayOf(DataTypes.bool),
        filterText: DataTypes.string
    },

    compiled() {
        this.pageEval = chrome.devtools.inspectedWindow.eval;
    },

    attached() {
        this.watch('cid', value => {
            this.pageEval('(' + getMessages.toString() + ')("' + value + '")',
                (res, ex) => {
                    if (!res || typeof res !== 'object') {
                        return;
                    }
                    this.data.set('shown', true);
                    this.data.set('messages', generateMessagesInfo(res));
                    san.nextTick(() => {
                        this.el.querySelectorAll('pre code.javascript').forEach(e => {
                            hljs.highlightBlock(e);
                            this.data.push('hidden', false);
                        });
                    });
                }
            );
        });

        this.watch('filterText', value => {
            this.filter(value.trim());
        });
    },

    filter(text) {
        for (let j = 0; j < this.data.get('hidden').length; j++) {
            this.data.set('hidden[' + j + ']', false);
        }
        if (!text) {
            return;
        }
        let messages = this.el.querySelectorAll('.messages');
        messages.forEach((e, i) => {
            if (!e.innerText.match(new RegExp(text, 'i'))) {
                this.data.set('hidden[' + i + ']', true);
            }
        });
    },

    computed: {
        displayStyle() {
            return {
                display: this.data.get('shown') ? 'block' : 'none'
            };
        }
    }

};
</script>

<style lang="stylus">
.messages-wrapper
    .messages
        margin: 3px 0
        .funcName
            color: #2196f3
            font-size: 120%
            border-bottom: 2px solid #2196f3
            margin-bottom: 5px
.hidden
    display: none
</style>
