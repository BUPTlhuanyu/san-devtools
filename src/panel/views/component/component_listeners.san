<template>
    <div class="listeners-wrapper" style="{{displayStyle}}">
        <input type="hidden" value="{{cid}}" />
        <div class="listeners {{hidden[i] ? 'hidden' : ''}}" s-for="l, i in listeners">
            <div class="eventName">{{l.name}}</div>
            <div class="lists" s-for="ll in l.list">
                <div class="info">
                    <span class="raw">{{ll.raw}}</span>
                    in
                    <span class="id">{{ll.func.id}}</span>
                </div>
                <pre><code class="javascript">{{ll.func.str}}</code></pre>
            </div>
        </div>
    </div>
</template>

<script>
import san, {DataTypes} from 'san';
import hljs from 'highlight.js';
import 'highlight.js/styles/default.css';
import prettyFast from 'pretty-fast';

let getListeners = cid => ({
    listeners: (() => {
        let listeners = document.getElementById(
            cid).__san_component__.listeners;
        for (let l in listeners) {
            for (let i = 0; i < listeners[l].length; i++) {
                let n = listeners[l][i].declaration.expr.name;
                listeners[l][i].func = (() => {
                    let path
                        = document.getElementById(cid).__san_path__.reverse();
                    for (let p = 0; p < path.length; p++) {
                        let f = document.getElementById(
                            path[p]).__san_component__[n];
                        if (f) {
                            return {
                                str: f.toString(),
                                id: path[p]
                            }
                        }
                    }
                })();
            }
        }
        return listeners;
    })()
});

function generateListenersInfo(data) {
    let listeners = [];
    let originListeners = data.listeners;
    for (let l in originListeners) {
        let event = [];
        for (let ll of originListeners[l]) {
            let pretty = prettyFast(ll.func.str, {
                url: 'test.js',
                indent: '  '
            });
            event.push({
                raw: ll.declaration.expr.raw,
                func: {
                    str: pretty.code,
                    id: ll.func.id
                }
            });
        }
        listeners.push({
            name: l,
            list: event
        });
    }
    return listeners;
}

export default {

    initData() {
        return {
            cid: '',
            shown: true,
            hidden: [],
            filterText: ''
        }
    },

    dataTypes: {
        cid: DataTypes.string,
        shown: DataTypes.bool,
        listeners: DataTypes.arrayOf(DataTypes.object),
        hidden: DataTypes.arrayOf(DataTypes.bool),
        filterText: DataTypes.string
    },

    compiled() {
        this.pageEval = chrome.devtools.inspectedWindow.eval;
    },

    attached() {
        this.watch('cid', value => {
            this.pageEval('(' + getListeners.toString() + ')("' + value + '")',
                (res, ex) => {
                    if (!res || typeof res !== 'object') {
                        return;
                    }
                    this.data.set('shown', true);
                    this.data.set('listeners', generateListenersInfo(res));
                    san.nextTick(() => {
                        this.el.querySelectorAll('pre code.javascript').forEach(e => {
                            hljs.highlightBlock(e);
                            this.data.push('hidden', false);
                        });
                    });
                }
            );
        });

        this.watch('filterText', value => {
            this.filter(value.trim());
        });
    },

    filter(text) {
        for (let j = 0; j < this.data.get('hidden').length; j++) {
            this.data.set('hidden[' + j + ']', false);
        }
        if (!text) {
            return;
        }
        let listeners = this.el.querySelectorAll('.listeners');
        listeners.forEach((e, i) => {
            if (!e.innerText.match(new RegExp(text, 'i'))) {
                this.data.set('hidden[' + i + ']', true);
            }
        });
    },

    computed: {
        displayStyle() {
            return {
                display: this.data.get('shown') ? 'block' : 'none'
            };
        }
    }

};
</script>

<style lang="stylus">
.listeners-wrapper
    .listeners
        margin: 3px 0
        .eventName
            color: #2196f3
            font-size: 120%
            border-bottom: 2px solid #2196f3
            margin-bottom: 5px
        .lists
            .info
                span
                    border-radius: 5px
                    color: #fff
                    padding: 3px
                    &.raw
                        background-color: #ff4081
                    &.id
                        background-color: #2196f3
.hidden
    display: none
</style>


