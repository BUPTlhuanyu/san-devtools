<template>
    <div class="sm-tree-view-wrapper custom">
        <san-tree-view
            s-ref="tv"
            ref="tv"
            treeData="{=treeData=}"
            compact="{{!0}}"
            wholeLineSelected="{{!0}}"
            keepingSelected="{{!0}}"
            filterBar="{{!0}}"
            filterIcon="search"
            filterPlaceholder="Find component"
            filterText="{=filterText=}"
            initiallyOpen="{{!0}}"
            primaryTogglesNestedTreeView="{{!0}}"
            dataSource="JSON"
            loadingToast="{{loadingToast}} {{processingComponentInfo}}"
            loading="{=loading=}"
            loadingToastContentFromColor="#2196f3"
            loadingToastContentToColor="#000"
            progress="{=progress=}"
        >
        </san-tree-view>
    </div>
</template>

<script>
import san, {DataTypes} from 'san';
import _ from 'lodash';
import Messenger from 'chrome-ext-messenger';

import Icon from 'san-mui/lib/Icon';
import Chip from 'san-mui/lib/Chip';
import Avatar from 'san-mui/lib/Avatar';
import Divider from 'san-mui/lib/Divider'

import TaskDelayer from '../../../js/common/task_delayer';
import utils from '../../../js/common/utils';
import components from '../../../js/host/components';
import {TreeView, TreeViewItem} from '../../components/TreeView';

import 'san-mui/lib/index.css';
import 'san-mui/lib/Divider/Divider.styl';
import 'san-mui/lib/Chip/Chip.styl';
import 'san-mui/lib/Avatar/Avatar.styl';

import '../../components/TreeView/index.styl';
import '../../components/TreeView/custom.styl';

export default {

    components: {
        'san-icon': Icon,
        'san-tree-view': TreeView,
        'san-tree-view-item': TreeViewItem,
        'san-divider': Divider,
        'san-chip': Chip,
        'san-avatar': Avatar
    },

    initData() {
        return {
            // 默认不对执行代码进行合并处理
            maxLengthOfExecutionCodeQueue: 10,
            cid: '',
            loadingToast: 'Building component tree... ',
            loading: true,
            processingComponentInfo: ''
        };
    },

    dataTypes: {
        maxLengthOfExecutionCodeQueue: DataTypes.number,
        cid: DataTypes.string,
        loadingToast: DataTypes.string,
        loading: DataTypes.bool,
        processingComponentInfo: DataTypes.string
    },

    messages: {
        'EVENT:mouseover'(arg) {
            let d = this.getComponentIdAndNameFromTreeViewItem(arg.value.comp);
            d && d.id && this.mouseOverConnection.sendMessage(
                'content_script:highlight_dom', {id: d.id}, () => {});
        },
        'EVENT:mouseout'(arg) {
            this.mouseOutConnection.sendMessage(
                'content_script:unhighlight_dom', {}, () => {});
        },
        'EVENT:click'(arg) {
            let d = this.getComponentIdAndNameFromTreeViewItem(arg.value.comp);
            if (!d) {
                return;
            }
            this.data.set('cid', d.id);
            this.dispatch('UI:current_component_id', d);
            this.pageEval('window.' + SAN_DEVTOOL
                + '.data.selectedComponentId = "' + d.id + '"');
        }
    },

    compiled() {
        this.pageEval = chrome.devtools.inspectedWindow.eval;
        this.messenger = new Messenger();
        this.mouseOverConnection = this.messenger.initConnection(
            'component_item_mouseover', () => {});
        this.mouseOutConnection = this.messenger.initConnection(
            'component_item_mouseout', () => {});
    },

    inited() {
        this.sanCompInfoDelayer = new TaskDelayer({
            count: this.data.get('maxLengthOfExecutionCodeQueue'),
            delay: 500,
            task: queue => {
                this.retrieveComponentDataFromPage(
                    this.attachToTree.bind(this), queue);
            }
        });

        // 获取页面当前拥有 _san_XXX 的元素的个数，用来决定是否开启代码合并执行模式，
        // 以及合并的条数。
        this.pageEval('(' + utils.getSanIdElementCount.toString() + ')()',
            (res, ex) => {
                if (typeof res !== 'number') {
                    return;
                }
                this.count = res;
                this.data.set('maxLengthOfExecutionCodeQueue',
                    Math.ceil(res / 1000));
            }
        );
        // 初始化 inspect 高亮 mask。
        this.pageEval('window.' + SAN_DEVTOOL + '.highlighter.init()');
        // 确保 __san_devtool__.san 已经赋值完毕才开始监听 content script 发来的
        // component_tree 消息。
        this.pageEval('window.' + SAN_DEVTOOL + '.san', (res, ex) => {
            if (!res) {
                return;
            }
            // 首次打开 San devtool panel，一次性从 content script 加载。
            this.sanMsgConnection = this.messenger.initConnection(
                'component_tree',
                (message, from, sender, sendResponse) => {
                    this.lastSanMessageTimestamp = Date.now();
                    // 只有历史记录列表处于正在记录的状态时才向其发送事件。
                    let recording = this.data.get('recording');
                    if (recording) {
                        this.sanMsgConnection.sendMessage('devtool:history_info', message,
                            () => {});
                    }

                    // 更新 treeData 组件树。
                    this.updateTreeData(message);
                }
            );
            // 更新 component tree 的变化
            this.messenger.initConnection('component_tree_mutations',
                (message, from, sender, sendResponse) => {
                    this.lastSanMessageTimestamp = Date.now();
                    if (!message || !_.isObject(message)
                        || !_.isArray(message.queue)) {
                        return;
                    }
                    if (this.data.get('progress') >= 100) {
                        this.data.set('progress', .1);
                    }
                    this.data.set('loading', true);
                    for (let m of message.queue) {
                        this.isMutation = true;
                        this.updateTreeData(m);
                    }
                }
            );
        });
        // 通知页面 devtool 面板已经打开，可以开始发送 comp-XXX 消息。
        this.pageEval('window.' + SAN_DEVTOOL + '.devtoolPanelCreated = true');
    },

    created() {
        // 面板初始化时一次性从 __san_devtool__.data 中读取整个组件树结构。
        // FIXME: 组件树很大时的效率问题需要解决。
        this.pageEval('window.' + SAN_DEVTOOL + '.data', (res, ex) => {
            if (!res || !_.isObject(res) || !res.treeData) {
                return;
            }
            if (!res.treeData.length) {
                this.data.set('loadingToast', 'No component found');
                return;
            }
            this.data.set('treeData', res.treeData);
            san.nextTick(() => {
                this.ref('tv').data.set('defaultSelectedIdentity',
                    res.selectedComponentId);
            });
        });
    },

    attached() {
    },

    // 通过 indexList 获取组件及其父组件的 key 与 data 信息。
    getDataByPathIndexList(list, root) {
        let r = root;
        let res = {
            self: null,
            selfKey: '',
            parent: null,
            parentKey: ''
        }
        for (let [i, p] of list.entries()) {
            if (!r['treeData'] || !r['treeData'][p]) {
                res.parentKey = res.parentKey.substring(1);
                res.selfKey = res.selfKey.substring(1);
                return res;
            }
            r = r['treeData'][p];
            if (i < list.length - 1) {
                res.parentKey += '.treeData[' + p + ']';
            }
            res.selfKey += '.treeData[' + p + ']';
            if (i === list.length - 2) {
                res.parent = r;
            } else if (i === list.length - 1) {
                res.self = r;
            }
        }
        !res.parent && (res.parent = root);
        res.parentKey = res.parentKey.substring(1);
        res.selfKey = res.selfKey.substring(1);
        return res;
    },

    // 根据 TreeView 的 ref 信息通过 indexList 返回 item 组件的实例。
    getItemComponentInstance(indexList, isAttachedOrDetached) {
        if (!indexList || indexList.length === 0) {
            return null;
        }
        let list = _.clone(indexList);
        if (isAttachedOrDetached) {
            list.pop();
        }
        let refKey = 'tv' + list.join('_');
        let ref = this.ref(refKey);
        return ref ? ref : null;
    },

    // Attach new component item to "treeData" of component tree.
    attachToTree(data, oldIndexList, indexList, root) {
        const d = this.getDataByPathIndexList(indexList, root);
        if (!d.parentKey) {
            d.parentKey = 'treeData';
        } else {
            d.parentKey += '.treeData';
        }
        if (!d.selfKey) {
            d.selfKey = 'treeData[' + indexList[0] + ']';
        }

        if (this.data.get(d.parentKey) && !data.self) {
            this.data.push(d.parentKey, data);
        }
    },

    // Detach component item from "treeData" of component tree.
    detachFromTree(data, oldIndexList, indexList, root) {
        const d = this.getDataByPathIndexList(indexList, root);
        if (d.self && d.parent) {
            san.nextTick(() => {
                this.data.splice(d.parentKey + '.treeData',
                    [indexList[indexList.length - 1]]);
            });
        }
    },

    // Update the component data from "comp-updated" event.
    updateTreeItem(data, oldIndexList, indexList, root) {
        // Refresh component data for selected component id.
        if (data.secondaryText === this.data.get('cid')) {
            this.data.set('cid', '');
            this.dispatch('UI:current_component_id', {});
            let id = data['secondaryText'];
            let compName = (data['text'].match(/<.+>/) || [])[0];

            if (id && compName) {
                san.nextTick(() => {
                    this.data.set('cid', id);
                    this.dispatch('UI:current_component_id', {id, compName});
                });
            }
        }
        // Only consider the key "extras".
        if (!data.extras || !data.extras[0]) {
            return;
        }
        const d = this.getDataByPathIndexList(indexList, root);
        if (d.self && d.parent) {
            let keys = ['extras'];
            let key = (d.parentKey ? d.parentKey + '.' : '')
                + 'treeData[' + indexList[indexList.length - 1] + '].';
            for (let k of keys) {
                this.data.set(key + k, data[k]);
            }
        }
    },

    // 偷懒的做法，直接从页面上下文的原始组件树中获取数据。此处异步读取与转换页面 context
    // 的执行结果存在时间损耗。
    retrieveComponentDataFromPage(callback, queue) {
        let code = '[' + queue.join(',') + ']';
        this.pageEval(code, (resList, ex) => {
            if (!resList || !_.isArray(resList)) {
                return;
            }
            for (let res of resList) {
                if (!res || typeof res !== 'object') {
                    return;
                }
                let data = res.data;
                let indexList = res.indexList;
                let oldIndexList = res.oldIndexList;
                if (!data || !indexList) {
                    return;
                }
                callback(data, oldIndexList, indexList, this.data.raw);
            }
        });
    },

    // Update component tree by comp-updated, comp-attached and comp-detached
    // events.
    updateTreeData(messageData) {
        let {message, idPath, data, oldIndexList, indexList, count}
            = messageData;
        if (!data || !idPath) {
            return;
        }
        this.count = count;
        let root = this.data.raw;
        let pathIndexList = components.getIndexListFromPathAndTreeData(
            idPath, root.treeData);
        let parentPath = idPath.slice(0, idPath.length - 1);
        let max = this.data.get('maxLengthOfExecutionCodeQueue');

        switch (message) {
            case 'comp-updated': {
                this.updateTreeItem(data, oldIndexList, indexList, root);
                break;
            }
            case 'comp-attached': {
                // Do nothing if parent component has not attached yet.
                if (idPath.length > 1 && pathIndexList[0] === -1) {
                    if (this.data.get('progress') >= 100) {
                        this.data.set('progress', .1);
                    }
                    this.data.set('processingComponentInfo',
                        '[' + data.secondaryText + ']');
                    this.data.set('loading', true);
                    return;
                }

                this.data.set('processingComponentInfo', '');
                for (let [i, p] of idPath.entries()) {
                    if (i < idPath.length - 1) {
                        continue;
                    }
                    let currentIndexList = indexList.slice(0, i + 1);
                    let code = 'window.' + SAN_DEVTOOL + '.data'; 
                    for (let index of currentIndexList) {
                        code += '.treeData[' + index + ']';
                    }

                    this.sanCompInfoDelayer.count = max;
                    this.sanCompInfoDelayer.spawn('{data:' + code
                        + ',oldIndexList:[' + oldIndexList + '],indexList:['
                        + currentIndexList + ']}');
                }
                break;
            }
            case 'comp-detached': {
                this.detachFromTree(data, oldIndexList, pathIndexList, root);
                if (data && data.id === this.data.get('cid')) {
                    if (this.parentComponent) {
                        let panels = ['cbi', 'cdv', 'cc', 'cf', 'cm', 'cl'];
                        let keys = [
                            'infoList',
                            'data',
                            'computed',
                            'filters',
                            'messages',
                            'listeners'
                        ];
                        for (let [i, p] of panels.entries()) {
                            let ref = this.parentComponent.ref(p);
                            if (ref) {
                                ref.data.set(keys[i],
                                    ref.initData()['default' + keys[i]]);
                            }
                        }
                    }
                }
                break;
            }
        }
    },

    getComponentIdAndNameFromTreeViewItem(comp) {
        if (!comp || !comp.data) {
            return null;
        }
        let id = comp.data.get('secondaryText');
        let compName = (comp.data.get('primaryText').match(/<.+>/) || [])[0];
        if (!id || !compName) {
            return null;
        }
        return {id, compName};
    }
}
</script>

<style lang="stylus">
.sm-tree-view-wrapper
    width 100%
    height 100%
    user-select none
    .sm-tree-view
        height: 100%
        .sm-tree-view-filter-bar
            box-sizing border-box
            width 100%
            height 36px
            overflow hidden
            z-index 1000
            position absolute
            pointer-events none
            padding 0 !important
            .sm-text-field
                pointer-events: auto
                position relative
                width 100%
                height 100%
                zoom 1 !important
                padding 0 !important
                .sm-text-field-icon
                    top 8px !important
                .sm-text-field-content
                    position absolute
                    width calc(100% - 50px)
                    height 32px
                    top 0
                    left 50px
                    padding 4px 0 0 !important
                    .sm-text-field-line
                        top 35px
        .sm-tree-view-item-wrapper
            height 100%
            overflow auto
            > .sm-tree-view-item:first-child
                margin-top 46px
            .sm-tree-view-item
                .sm-touch-ripple.selected:hover
                    &~.sm-tree-view-item-content.selected
                        .sm-tree-view-item-primary-text
                            background-image linear-gradient(to right, #c96 calc(100% - 40px), transparent)
                .sm-tree-view-item-content
                    .sm-tree-view-item-primary-text
                    &:hover
                        font-family 'Consolas'
                        font-size 1.2em
                        font-weight bold
                        color #c96
                        width 100%
                        background-image linear-gradient(to right, #c96 calc(100% - 40px), transparent)
                        -webkit-background-clip text
                        -webkit-text-fill-color transparent
                        background-size calc(100% - 80px) auto
                        background-repeat-x no-repeat
                    &.selected
                        .sm-tree-view-item-primary-text
                            background-image linear-gradient(90deg, #fff calc(100% - 40px), transparent)
                    .sm-tree-view-item-extras
                        left 50%
                        transform translateX(-50%)
                    .sm-tree-view-item-secondary-text
                        margin-right 5px
                    .sm-chip
                        background-color #afd2ee !important
                        margin-left 5px
                        .sm-avatar
                            background-color #1b74ba !important
                            color #fff !important

    .sm-text-field
        .sm-text-field-hint
            width 100%
            white-space nowrap
            text-overflow ellipsis
            overflow hidden
    .sm-tree-view-container
        width 100%
        overflow auto
        position absolute
        top 34px
        bottom 0
</style>
