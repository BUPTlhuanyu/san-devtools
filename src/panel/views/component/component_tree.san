<template>
    <div class="sm-tree-view-wrapper custom">
        <san-tree-view
            treeData="{=treeData=}"
            compact="{{!0}}"
            wholeLineSelected="{{!0}}"
            keepingSelected="{{!0}}"
            filterBar="{{!0}}"
            filterBarHintText="Type to find component, Enter to highlight"
            initiallyOpen="{{!0}}"
            primaryTogglesNestedTreeView="{{!0}}"
            dataSource="JSON"
        >
            <div class="sm-tree-view-item-wrapper">
                <san-tree-view-item
                    san-for="item, index in treeData"
                    initiallyOpen="{{!0}}"
                    treeData="{=item=}"
                    dataSource="JSON"
                >
                </san-tree-view-item>
            </div>
        </san-tree-view>
    </div>
</template>

<script>
import Messenger from 'chrome-ext-messenger';
import Icon from 'san-mui/lib/Icon';
import Divider from 'san-mui/lib/Divider'

import utils from '../../../js/common/utils';
import components from '../../../js/host/components';
import {TreeView, TreeViewItem} from '../../components/TreeView';

import 'san-mui/lib/index.css';
import 'san-mui/lib/Divider/Divider.styl';

import '../../components/TreeView/index.styl';
import '../../components/TreeView/custom.styl';

export default {

    components: {
        'san-icon': Icon,
        'san-tree-view': TreeView,
        'san-tree-view-item': TreeViewItem,
        'san-divider': Divider
    },

    initData() {
        return {
            // 默认不对执行代码进行合并处理
            maxLengthOfExecutionCodeQueue: 1,
            cid: ''
        }
    },

    messages: {
        'EVENT:mouseover'(arg) {
            let id = this.getComponentIdFromTreeViewItem(arg.value.comp);
            id && this.mouseOverConnection.sendMessage(
                'content_script:highlight_dom', {id: id}, () => {});
        },
        'EVENT:mouseout'(arg) {
            this.mouseOutConnection.sendMessage(
                'content_script:unhighlight_dom', {}, () => {});
        },
        'EVENT:click'(arg) {
            let id = this.getComponentIdFromTreeViewItem(arg.value.comp);
            this.data.set('cid', id);
            id && this.dispatch('UI:current_component_id', id);
        }
    },

    compiled() {
        this.pageEval = chrome.devtools.inspectedWindow.eval;
        this.messenger = new Messenger();
        this.mouseOverConnection = this.messenger.initConnection(
            'component_item_mouseover', () => {});
        this.mouseOutConnection = this.messenger.initConnection(
            'component_item_mouseout', () => {});
    },

    inited() {
        this.excutionIndex = 0;
        this.excutionCodeQueue = [];
        this.excutionCodeQueueChecker = null;
        // 获取页面当前拥有 _san_XXX 的元素的个数，用来决定是否开启代码合并执行模式，
        // 以及合并的条数。
        this.pageEval('(' + utils.getSanIdElementCount.toString() + ')()',
            (res, ex) => {
                if (typeof res !== 'number') {
                    return;
                }
                this.count = res;
                this.data.set('maxLengthOfExecutionCodeQueue',
                    Math.ceil(res / 1000));
            }
        );
        // 初始化 inspect 高亮 mask。
        this.pageEval('window.' + SAN_DEVTOOL + '.highlighter.init()');
        // 确保 __san_devtool__.san 已经赋值完毕才开始监听 content script 发来的
        // component_tree 消息。
        this.pageEval('window.' + SAN_DEVTOOL + '.san', (res, ex) => {
            if (!res) {
                return;
            }
            this.messenger = new Messenger();
            let connection = this.messenger.initConnection(
                'component_tree',
                (message, from, sender, sendResponse) => {
                    // 只有历史记录列表处于正在记录的状态时才向其发送事件。
                    let recording = this.data.get('recording');
                    console.log('recording', recording);
                    if (recording) {
                        connection.sendMessage('devtool:history_info', message,
                            () => {});
                    }
                    // 对于 maxLengthOfExecutionQueue 大于 1 的页面进行代码队列检查。
                    if (this.data.get('maxLengthOfExecutionCodeQueue') > 1) {
                        this.dirtyCheckExecutionCodeQueue();
                    }
                    // 更新 treeData 组件树。
                    this.updateTreeData(message.message, message.idPath,
                        message.data, message.indexList, message.count);
                }
            );
        });
        // 通知页面 devtool 面板已经打开，可以开始发送 comp-XXX 消息。
        this.pageEval('window.' + SAN_DEVTOOL + '.devtoolPanelCreated = true');
    },

    created() {
        // 面板初始化时一次性从 __san_devtool__.data 中读取整个组件树结构。
        // FIXME: 组件树很大时的效率问题需要解决。
        this.pageEval('window.' + SAN_DEVTOOL + '.data.treeData', (res, ex) => {
            this.data.set('treeData', res);
        });
    },

    attached() {
    },

    // 通过 indexList 获取组件及其父组件的 key 与 data 信息。
    getDataByPathIndexList(list, root) {
        let r = root;
        let res = {
            self: null,
            selfKey: '',
            parent: null,
            parentKey: ''
        }
        for (let [i, p] of list.entries()) {
            if (!r['treeData'] || !r['treeData'][p]) {
                res.parentKey = res.parentKey.substring(1);
                res.selfKey = res.selfKey.substring(1);
                return res;
            }
            r = r['treeData'][p];
            if (i < list.length - 1) {
                res.parentKey += '.treeData[' + p + ']';
            }
            res.selfKey += '.treeData[' + p + ']';
            if (i === list.length - 2) {
                res.parent = r;
            } else if (i === list.length - 1) {
                res.self = r;
            }
        }
        !res.parent && (res.parent = root);
        res.parentKey = res.parentKey.substring(1);
        res.selfKey = res.selfKey.substring(1);
        return res;
    },

    // 定时检查合并执行队列里是否还有未执行的代码。
    // FIXME: 经合理优化后，应取消此检查。
    dirtyCheckExecutionCodeQueue() {
        if (!this.excutionCodeQueueChecker) {
            let max = this.data.get('maxLengthOfExecutionCodeQueue');
            this.excutionCodeQueueChecker = setInterval(() => {
                let len = this.excutionCodeQueue.length;
                if (len > 0 && len <= max) {
                    this.retrieveComponentDataFromPage(
                        this.attachToTree.bind(this));
                    this.excutionCodeQueue.splice(0, len);
                    this.excutionIndex = 0;
                }
            }, 500);
        }
    },

    // 将新组件 attach 到 treeData 组件树结构中。
    attachToTree(data, indexList, root) {
        const d = this.getDataByPathIndexList(indexList, root);
        if (!d.parentKey) {
            d.parentKey = 'treeData';
        } else {
            d.parentKey += '.treeData';
        }
        if (!d.selfKey) {
            d.selfKey = 'treeData[' + indexList[0] + ']';
        }
        if (this.data.get(d.parentKey) && !data.self) {
            this.data.push(d.parentKey, data);
        }
    },

    // 将组件从 treeData 组件树结构中 detach。
    detachFromTree(data, indexList, root) {
        const d = this.getDataByPathIndexList(indexList, root);
        if (d.self && d.parent) {
            this.data.splice(
                d.parentKey + '.treeData', [indexList[indexList.length - 1]]);
        }
    },

    // 偷懒的做法，直接从页面上下文的原始组件树中获取数据。此处异步读取与转换页面 context
    // 的执行结果存在时间损耗。
    retrieveComponentDataFromPage(callback) {
        let code = '[' + this.excutionCodeQueue.join(',') + ']';
        this.pageEval(code, (resList, ex) => {
            if (!resList || !(resList instanceof Array)) {
                return;
            }
            for (let res of resList) {
                if (!res || typeof res !== 'object') {
                    return;
                }
                let data = res.data;
                let indexList = res.indexList;
                if (!data || !indexList) {
                    return;
                }
                callback(data, indexList, this.data.raw);
            }
        });
    },

    // 对于 comp-attached 与 comp-detached 事件更新组件树结构。
    updateTreeData(message, path, data, indexList, count) {
        if (!data || !path) {
            return;
        }
        if (message !== 'comp-attached' && message !== 'comp-detached') {
            return;
        }
        this.count = count;
        let root = this.data.raw;
        let pathIndexList = components.getIndexListFromPathAndTreeData(
            path, root.treeData);
        let parentPath = path.slice(0, path.length - 1);
        let max = this.data.get('maxLengthOfExecutionCodeQueue');

        switch (message) {
            case 'comp-attached': {
                // 父组件还未 attached。暂不考虑。
                if (path.length > 1 && pathIndexList[0] === -1) {
                    return;
                }

                for (let [i, p] of path.entries()) {
                    let currentIndexList = indexList.slice(0, i + 1);
                    let code = 'window.' + SAN_DEVTOOL + '.data'; 
                    for (let index of currentIndexList) {
                        code += '.treeData[' + index + ']';
                    }
                    if (i < path.length - 1) {
                        continue;
                    }
                    // 执行合并后的代码。
                    if (this.excutionIndex % max === 0
                        && this.excutionCodeQueue.length > 0) {
                        this.retrieveComponentDataFromPage(
                            this.attachToTree.bind(this));
                        this.excutionCodeQueue.splice(0,
                            this.excutionCodeQueue.length);
                    }
                    // 合并代码。
                    this.excutionCodeQueue.push('{data:' + code
                        + ',indexList:[' + currentIndexList + ']}');
                    this.excutionIndex++;
                }
                break;
            }
            case 'comp-detached': {
                this.detachFromTree(data, pathIndexList, root);
                if (data && data.id === this.data.get('cid')) {
                    if (this.parentComponent) {
                        let panels = ['cbi', 'cdv', 'cc', 'cf', 'cm', 'cl'];
                        let keys = ['infoList', 'data', 'computed', 'filters', 'messages', 'listeners'];
                        for (let [i, p] of panels.entries()) {
                            let ref = this.parentComponent.ref(p);
                            if (ref) {
                                ref.data.set(keys[i],
                                    ref.initData()['default' + keys[i]]);
                            }
                        }
                    }
                }
                break;
            }
        }
    },

    getComponentIdFromTreeViewItem(comp) {
        if (!comp || !comp.data) {
            return '';
        }
        let data = comp.data.get('secondaryText');
        if (!data) {
            return;
        }
        return data;
    }
}
</script>

<style lang="stylus">
.sm-tree-view-wrapper
    width: 100%
    height: 100%
    .sm-tree-view
        height: 100%
        .sm-tree-view-item-wrapper
            height: calc(100% - 34px)
            overflow: auto
            .sm-tree-view-item
                .sm-touch-ripple.selected:hover
                    &~.sm-tree-view-item-content.selected
                        .sm-tree-view-item-primary-text
                            background-image: linear-gradient(to right, #c96 calc(100% - 40px), transparent);
                .sm-tree-view-item-content
                    .sm-tree-view-item-primary-text
                    &:hover
                        font-family: 'Consolas'
                        font-size: 1.2em
                        font-weight: bold
                        color: #c96
                        width: 100%;
                        background-image: linear-gradient(to right, #c96 calc(100% - 40px), transparent);
                        -webkit-background-clip: text;
                        -webkit-text-fill-color: transparent;
                        background-size: calc(100% - 80px) auto;
                        background-repeat-x: no-repeat;
                    &.selected
                        .sm-tree-view-item-primary-text
                            background-image: linear-gradient(90deg,#fff calc(100% - 40px),transparent);

    .sm-text-field
        .sm-text-field-hint
            width: 100%
            white-space: nowrap
            text-overflow: ellipsis
            overflow: hidden
    .sm-tree-view-container
        width: 100%
        overflow: auto
        position: absolute
        top: 34px
        bottom: 0
</style>
