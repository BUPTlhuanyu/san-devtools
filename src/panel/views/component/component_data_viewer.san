<template>
    <div>
        <input type="hidden" value="{{cid}}" />
        <san-json-tree-view
            alwaysShowRoot="{{!0}}"
            data="{=data=}"
            filterText="{{filterText}}"
            rootName="data"
            readonly="{{dataReadonly}}"
            on-change="change($event)"
            on-append="append($event)"
            on-rename="rename($event)"
            on-delete="delete($event)"
        >
        </san-json-tree-view>
    </div>
</template>

<script>
import san, {DataTypes} from 'san';
import JSONView from 'json-tree-view';
import 'json-tree-view/devtools.css';
import Messenger from 'chrome-ext-messenger';

import JsonTreeView from '../../components/misc/json_tree_view';
import injector from '../../../js/host/injector';

export default {

    components: {
        'san-json-tree-view': JsonTreeView
    },

    initData() {
        return {
            data: {},
            filterText: '',
            dataReadonly: false
        };
    },

    dataTypes: {
        cid: DataTypes.string,
        data: DataTypes.object,
        filterText: DataTypes.string,
        dataReadonly: DataTypes.bool
    },

    attached() {
        this.pageEval = chrome.devtools.inspectedWindow.eval;

        this.watch('cid', value => {
            this.pageEval(
                `window.${SAN_DEVTOOL}._map["${value}"].el.__san_data__`,
                (res, ex) => {
                    if (!res || typeof res !== 'object') {
                        this.owner.data.set('panelVisibility.dv', false);
                        return;
                    }
                    this.data.set('data', res);
                    this.owner.data.set('panelVisibility.dv',
                        this.data.get('data')
                            && Object.keys(this.data.get('data')).length > 0);
                }
            );
        });
    },

    setData(args) {
        return this.data.get('dataReadonly')
            ? () => {}
            // Execute in page context.
            : injector.fromDevtool('(' + (args => {
                // Like a['b'][0]
                var squareBracketify = key => key.map((v, i) => typeof v === 'number'
                    ? '[' + v + ']'
                    : (i === 0 ? v : '["' + v + '"]')).join('');
                var cid = args[0];
                if (args[1] && args[1][0] === null) {
                    return;
                }
                var key = squareBracketify(args[1]);
                var event = args[4];
                var data = window[SAN_DEVTOOL]._map[cid].el.__san_component__.data;
                switch (event) {
                    case 'change':
                        if (typeof data.get(key) !== 'undefined') {
                            data.set(key, args[3]);
                        }
                        break;
                    case 'append':
                        if (data.get(key)) {
                            break;
                        }
                        args[2] === 'value'
                            ? data.push(key, args[3])
                                : data.set(key, null);
                        break;
                    case 'rename':
                        var oldKey = squareBracketify(args[1].map((v, i) => i === args[1].length - 1 ? args[2] : v));
                        var value = data.get(oldKey);
                        data.set(oldKey, undefined);
                        data.set(key, value);
                        break;
                    case 'delete':
                        var k = squareBracketify(args[1].slice(0, args[1].length - 1));
                        var index = args[1][args[1].length - 1];
                        if (args[3] === 'array') {
                            data.splice(k, [index, 1]);
                        } else {
                            data.set(key, undefined);
                        }
                        break;
                }
            }).toString() + ')(' + JSON.stringify(args) + ')');
    },

    change(args) {
        let [view, key, oldVal, newVal] = args;
        this.setData([this.data.get('cid'), key, oldVal, newVal, 'change']);
    },

    append(args) {
        let [view, key, nameOrVal, newVal] = args;
        this.setData([this.data.get('cid'), key, nameOrVal, newVal, 'append']);
    },

    rename(args) {
        let [view, key, oldName, newName] = args;
        this.setData([this.data.get('cid'), key, oldName, newName, 'rename']);
    },

    delete(args) {
        let [view, key, deletedValue, parentType] = args;
        this.setData([this.data.get('cid'), key, deletedValue, parentType,
            'delete']);
    }

}
</script>

<style lang="stylus">


</style>