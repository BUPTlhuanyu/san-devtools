<template>
    <div class="computed-wrapper" style="{{displayStyle}}">
        <input type="hidden" value="{{cid}}" />
        <div class="computed {{hidden[i] ? 'hidden' : ''}}" s-for="c, i in computed">
            <div class="funcName">{{c.name}}</div>
            <div class="deps-wrapper">
                <span s-for="d in c.deps" class="deps">
                    <span class="key">{{d.key}}</span>
                    <span class="value">{{d.value}}</span>
                </span>
            </div>
            <pre><code class="javascript">{{c.funcStr}}</code></pre>
        </div>
    </div>
</template>

<script>
import san, {DataTypes} from 'san';
import hljs from 'highlight.js';
import 'highlight.js/styles/default.css';
import prettyFast from 'pretty-fast';

let getComputed = cid => ({
    computed: (() => {
        let computedFuncStr = {};
        let computedFunc = window[SAN_DEVTOOL]._map[cid].el.__san_component__.computed;
        for (let c in computedFunc) {
            computedFuncStr[c] = computedFunc[c].toString();
        }
        return computedFuncStr;
    })(),
    computedDeps: window[SAN_DEVTOOL]._map[cid].el.__san_component__.computedDeps
});

function generateComputedInfo(data) {
    let computed = [];
    let originComputed = data.computed;
    let originComputedDeps = data.computedDeps;
    for (let c in originComputed) {
        let computedDeps = [];
        for (let d in originComputedDeps[c]) {
            let dd = {};
            dd.key = d;
            dd.value = originComputedDeps[c][d];
            computedDeps.push(dd);
        }
        let pretty = prettyFast(originComputed[c], {
            url: 'test.js',
            indent: '  '
        });
        computed.push({
            name: c,
            funcStr: pretty.code,
            deps: computedDeps
        });
    }
    return computed;
}

export default {

    initData() {
        return {
            shown: true,
            hidden: [],
            filterText: ''
        }
    },

    dataTypes: {
        cid: DataTypes.string,
        shown: DataTypes.bool,
        computed: DataTypes.arrayOf(DataTypes.object),
        hidden: DataTypes.arrayOf(DataTypes.bool),
        filterText: DataTypes.string
    },

    compiled() {
        this.pageEval = chrome.devtools.inspectedWindow.eval;
    },

    attached() {
        this.watch('cid', value => {
            this.pageEval('(' + getComputed.toString() + ')("' + value + '")',
                (res, ex) => {
                    if (!res || typeof res !== 'object') {
                        this.owner.data.set('panelVisibility.c', false);
                        return;
                    }
                    this.data.set('shown', true);
                    this.data.set('computed', generateComputedInfo(res));
                    this.owner.data.set('panelVisibility.c',
                        this.data.get('computed').length > 0);
                    san.nextTick(() => {
                        this.el.querySelectorAll('pre code.javascript').forEach(e => {
                            hljs.highlightBlock(e);
                            this.data.push('hidden', false);
                        });
                    });
                }
            );
        });

        this.watch('filterText', value => {
            this.filter(value.trim());
        });
    },

    filter(text) {
        for (let j = 0; j < this.data.get('hidden').length; j++) {
            this.data.set('hidden[' + j + ']', false);
        }
        if (!text) {
            return;
        }
        let computed = this.el.querySelectorAll('.computed');
        computed.forEach((e, i) => {
            if (!e.innerText.match(new RegExp(text, 'i'))) {
                this.data.set('hidden[' + i + ']', true);
            }
        });
    },

    computed: {
        displayStyle() {
            return {
                display: this.data.get('shown') ? 'block' : 'none'
            };
        }
    }

};
</script>

<style lang="stylus">
pre
    font-size: .8em !important
    margin: .5em 0 !important
.computed-wrapper
    .computed
        margin: 3px 0
        .funcName
            color: #2196f3
            font-size: 120%
            border-bottom: 2px solid #2196f3
            margin-bottom: 5px
        .deps-wrapper
            line-height: 180%
            .deps
                display: inline-block
                white-space: nowrap
                margin-right: 20px
                span
                    padding: 3px
                    border-radius: 5px
                    color: #fff
                    &.key
                        background-color: #ff4081
                    &.value
                        background-color: #00bcd4
.hidden
    display: none
</style>
