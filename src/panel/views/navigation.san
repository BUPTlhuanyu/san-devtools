<template>
    <div class="navigation">
        <input type="hidden" value="{=currentTab=}" />
        <san-row type="flex">
            <san-col span="10" order="1">
                <san-appbar title="San {{sanVersion}}" class="version">
                    <san-icon-button
                        s-if="sanVersion !== 'unknown version'"
                        variants="info raised"
                        slot="left"
                        href="https://github.com/ecomfe/san/releases/tag/{{sanVersion}}"
                        target="_blank"
                    >
                        code
                    </san-icon-button>
                    <san-button
                        variants="secondery raised"
                        slot="right"
                        s-if="false"
                    >
                        <san-icon style="margin-right:6px">refresh</san-icon>
                        Reload
                    </san-button>
                    <san-icon-button
                        variants="info raised"
                        slot="right"
                        on-click="helpClick"
                    >
                        help
                    </san-icon-button>
                </san-appbar>
            </san-col>
            <san-col span="14" order="2">
                <section class="main-tabs">
                    <san-tabs value="{=currentTab=}" on-change="change($event)">
                        <san-tab
                            san-for="tab, index in tabs"
                            value="{{tab.value}}">
                            <san-icon slot="icon">{{tab.icon}}</san-icon>
                            <span slot="label" s-if="!smallTabItem">{{tab.label}}</span>
                        </san-tab>
                    </san-tabs>
                </section>
            </san-col>
        </san-row>
    </div>
</template>

<script>
import san, {DataTypes} from 'san';
import _ from 'lodash';
import Messenger from 'chrome-ext-messenger';
import utils from '../../js/common/utils';
import injector from '../../js/host/injector';

import Grid from 'san-mui/lib/Grid';
import Icon from 'san-mui/lib/Icon';
import AppBar from 'san-mui/lib/AppBar';
import {Button, IconButton} from 'san-mui/lib/Button';
import {IconMenu, MenuItem, Divider} from 'san-mui/lib/Menu';
import Tabs, {Tab} from 'san-mui/lib/Tabs';

import 'san-mui/lib/Grid/Grid.styl';
import 'san-mui/lib/AppBar/AppBar.styl';
import 'san-mui/lib/Button/Button.styl';
import 'san-mui/lib/Icon/Icon.styl';
import 'san-mui/lib/Menu/IconMenu.styl';
import 'san-mui/lib/Menu/MenuItem.styl';
import 'san-mui/lib/Menu/DropDownMenu.styl';
import 'san-mui/lib/Tabs/Tabs.styl';

import 'normalize.css';

export default {

    components: {
        'san-col': Grid.Col,
        'san-row': Grid.Row,
        'san-appbar': AppBar,
        'san-menu-item': MenuItem,
        'san-icon-menu': IconMenu,
        'san-menu-divider': Divider,
        'san-icon-button': IconButton,
        'san-button': Button,
        'san-icon': Icon,
        'san-tabs': Tabs,
        'san-tab': Tab
    },

    initData() {
        return {
            sanVersion: '',
            smallTabItem: false,
            tabs: [
                {
                    label: 'Component',
                    icon: 'widgets',
                    value: 'component'
                },
                {
                    label: 'History',
                    icon: 'history',
                    value: 'history'
                }
            ],
            currentTab: 'component'
        }
    },

    dataTypes: {
        sanVersion: DataTypes.string,
        smallTabItem: DataTypes.bool,
        tabs: DataTypes.arrayOf(DataTypes.objectOf(DataTypes.string))
    },

    computed: {
        navTitle() {

        }
    },

    messages: {

    },

    toggleMenu() {
    },

    setTabItemSize(e) {
        this.data.set('smallTabItem',
            window.innerWidth < 250 * this.data.get('tabs').length);
        return this.setTabItemSize.bind(this);
    },

    created() {
        let getVersion = () => (window[SAN_DEVTOOL].san.version);
        let getRoutesAndStore = () => ({
            routes: window[SAN_DEVTOOL].routes.length,
            stores: ({}).constructor.keys(
                window[SAN_DEVTOOL].store.stores).length
        });
        injector.fromDevtool(getVersion).then(res => {
            let ver = utils.normalizeVersionNumber(res);
            ver === 'N/A' && (ver = 'unknown version');
            this.data.set('sanVersion', ver);
        });
        injector.fromDevtool(getRoutesAndStore).then(res => {
            if (!res || !_.isObject(res)) {
                return;
            }
            let {routes, stores} = res;
            if (routes > 0) {
                this.data.push('tabs', {
                    label: 'Routes',
                    icon: 'navigation',
                    value: 'routes'
                });
            }
            if (stores > 0) {
                this.data.push('tabs', {
                    label: 'Store',
                    icon: 'settings_backup_restore',
                    value: 'store'
                });
            }
            this.setTabItemSize();
        });

        window.addEventListener('resize', this.setTabItemSize.bind(this)());
    },

    helpClick() {
        this.parentComponent.ref('comp').data.set('cid', '');
    }

}

</script>

<style lang="stylus">
.version .sm-appbar-title
    font-size: 18px
    line-height: 3rem

.sm-iconmenu .sm-iconmenu-tooltip
    width: auto

.navigation
    .sm-row-flex
        height: 40px
        &>.sm-col
            height: 100%
            .sm-appbar.version, .main-tabs
                height: 100%

.main-tabs
    .sm-tabs
        height: 100%
        .sm-tab
            flex-flow: row nowrap
            height: 40px
            min-height: auto
            .sm-icon
                ~ span
                    margin-top: 0
                    margin-left: 10px
        .sm-tabs-bar
            height: 4px

</style>
