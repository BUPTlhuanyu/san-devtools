<template>
    <div class="store-wrapper">
        <div class="store">
            <san-sub-header inset="{{!!0}}">
                Store name: <b>{{storeName}}</b>
            </san-sub-header>
            <san-json-tree-view
                s-ref="store-viewer"
                alwaysShowRoot="{{!0}}"
                data="{{storeData}}"
                filterText="{{filterText}}"
                rootName="{{storeName}}"
                readonly="{{!0}}"
            >
            </san-json-tree-view>
        </div>
        <div class="action">
            <san-divider />
            <san-sub-header inset="{{!!0}}">Action</san-sub-header>
            <div class="actions">
                <div class="action {{actionHidden ? 'hidden' : ''}}">
                    <pre><code class="javascript">{{actionHandler}}</code></pre>
                </div>
            </div>
        </div>
        <div class="payload">
            <san-divider />
            <san-sub-header inset="{{!!0}}">Payload</san-sub-header>
            <san-button
                class="dispatch"
                variants="raised info"
                on-click="dispatch(index)"
                s-if="!payloadReadonly"
            >
                <san-icon style="margin-right:5px">send</san-icon>
                Dispatch
            </san-button>
            <san-json-tree-view
                s-ref="payload-viewer"
                alwaysShowRoot="{{!0}}"
                data="{{payloadData}}"
                filterText="{{filterText}}"
                rootName="payload"
                readonly="{{payloadReadonly}}"
            >
            </san-json-tree-view>
        </div>
        <div class="comp" s-if="relatedComponents.length > 0">
            <san-divider />
            <san-sub-header inset="{{!!0}}">Related Components</san-sub-header>
            <div class="related-components">
                <san-inspectable-button
                    class="inspector"
                    cid="{{comp}}"
                    variants="raised info"
                    hasIcon="{{!0}}"
                    iconName="location_searching"
                    spacing="6px"
                    text="{{comp}}"
                    s-for="comp in relatedComponents"
                >
                </san-inspectable-button>
            </div>
        </div>
    </div>
</template>

<script>
import san, {DataTypes} from 'san';
import _ from 'lodash';
import JSONView from 'json-tree-view';
import Messenger from 'chrome-ext-messenger';
import hljs from 'highlight.js';
import prettyFast from 'pretty-fast';
import 'json-tree-view/devtools.css';
import 'highlight.js/styles/default.css';

import SubHeader from 'san-mui/lib/SubHeader';
import Divider from 'san-mui/lib/Divider';
import {Button} from 'san-mui/lib/Button';
import Icon from 'san-mui/lib/Icon';
import 'san-mui/lib/SubHeader/SubHeader.styl';
import 'san-mui/lib/Divider/Divider.styl';
import 'san-mui/lib/Button/Button.styl';
import 'san-mui/lib/Icon/Icon.styl';

import JsonTreeView from '../../components/misc/json_tree_view';
import injector from '../../../js/host/injector';

import InspectableButton from '../../components/misc/inspectable_button';


let requestStoreData = index =>
    'window.' + SAN_DEVTOOL + '.store.mutations[' + index + '].store.raw';

let saveStoreData = (index, data) =>
    'window.' + SAN_DEVTOOL + '.store.mutations[' + index + '].raw='
        + JSON.stringify(data);

let dispatchAction = (index, payload) =>
    'window.' + SAN_DEVTOOL + '.store.mutations[' + index
        + '].store.dispatch(window.' + SAN_DEVTOOL + '.store.mutations[' + index
        + '].name,' + JSON.stringify(payload) + ')';

let requestActionHandler = (index, actionNameFunc) =>
    'window.' + SAN_DEVTOOL + '.store.mutations[' + index + '].store.actions['
        + actionNameFunc + '].toString()';

let requestActionName = index =>
     'window.' + SAN_DEVTOOL + '.store.mutations[' + index + '].name';

let requestPayloadData = index =>
    'window.' + SAN_DEVTOOL + '.store.mutations[' + index + '].payload';

let requestComponentData = index =>
    'Object.keys(window.' + SAN_DEVTOOL + '.store.mutations[' + index
        + '].store.components)';


let requestMutationData = index => {
    let mutation = window[SAN_DEVTOOL].store.mutations[index];
    return {
        storeData: mutation.store.raw,
        storeName: mutation.store.name === '__default__' ? 'Default' : mutation.store.name,
        actionName: mutation.name,
        actionHandler: mutation.store.actions[mutation.name].toString(),
        relatedComponents: ({}).constructor.keys(mutation.store.components),
        payloadData: mutation.payload
    };
}


export default {

    components: {
        'san-sub-header': SubHeader,
        'san-divider': Divider,
        'san-button': Button,
        'san-icon': Icon,
        'san-json-tree-view': JsonTreeView,
        'san-inspectable-button': InspectableButton
    },

    initData() {
        return {
            index: -1,
            storeName: '',
            storeData: {},
            actionName: '',
            relatedComponents: [],
            actionHandler: '',
            actionHidden: false,
            filterText: '',
            payloadReadonly: false
        };
    },

    dataTypes: {
        index: DataTypes.number,
        storeName: DataTypes.string,
        storeData: DataTypes.object,
        actionName: DataTypes.string,
        relatedComponents: DataTypes.arrayOf(DataTypes.string),
        actionHandler: DataTypes.string,
        actionHidden: DataTypes.bool,
        filterText: DataTypes.string,
        payloadReadonly: DataTypes.bool
    },

    created() {
        this.watch('index', value => {
            if (value < 0) {
                return;
            }
            injector.fromDevtool(requestMutationData, value).then(data => {
                for (let k of Object.keys(data)) {
                    this.data.set(k, data[k]);
                }
                san.nextTick(() => {
                    this.el.querySelectorAll('code.javascript').forEach(e => {
                        hljs.highlightBlock(e);
                        this.data.set('actionHidden', false);
                    });
                });
            });
        });
    },

    save(name) {
        injector.fromDevtool(saveStoreData(name,
            this.ref('store-viewer').viewer().value));
    },

    dispatch(index) {
        injector.fromDevtool(dispatchAction(index,
            this.ref('payload-viewer').viewer().value));
    }

}
</script>

<style lang="stylus">
.related-components
    .inspector
        display: inline-block
        margin-right: 5px
        button
            text-transform: none !important
b
    color #2196f3 !important
button.dispatch
    position: absolute
    top: 20px
    right: 20px
    text-transform: none !important
    zoom: .7
.hidden
    display: none
.store-wrapper
    &>div
        position: relative
</style>
