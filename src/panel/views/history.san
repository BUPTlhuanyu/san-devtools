<template>
    <div class="sd-history">
        <div class="toolbar">
            <san-button
                variants="raised {{recording ? 'danger' : 'info'}}"
                on-click="record"
            >
                <san-icon>
                    {{recording ? 'play_arrow' : 'pause'}}
                </san-icon>
                {{recording ? 'Recording' : 'Stopped'}}
            </san-button>
            <san-button variants="raised success" onclick="clear" s-if="false">
                <san-icon>clear</san-icon> Clear
            </san-button>
        </div>
        <div class="table-head-wrapper backdrop-blur">
            <san-table>
                <san-thead>
                    <san-tr>
                        <san-th>Timestamp</san-th>
                        <san-th>Event</san-th>
                        <san-th>Component</san-th>
                        <san-th>Data</san-th>
                    </san-tr>
                </san-thead>
            </san-table>
        </div>
        <div class="table-body-wrapper">
            <san-table>
                <san-tbody>
                    <san-tr s-for="h, i in historyAfterDevtoolPanelCreated">
                        <san-td>{{h.datetime}}</san-td>
                        <san-td><span class="blue">{{h.event}}</span></san-td>
                        <san-td>
                            <div
                                class="button-wrapper"
                                on-mouseover="highlight(h.id)"
                                on-mouseout="unhighlight()"
                            >
                                <san-button
                                    variants="raised info"
                                    on-click="inspectId(h.id)"
                                >{{h.id}}</san-button>
                            </div>
                            <span>{{h.componentName}}</span>
                        </san-td>
                        <san-td>
                            <san-json-tree-view
                                s-if="!!h.data"
                                data="{{h.data}}"
                                expand="{{!!0}}"
                                rootName="data"
                            >
                            </san-json-tree-view>
                        </san-td>
                    </san-tr>
                </san-tbody>
                <san-tbody s-if="allLoaded">
                    <san-tr s-for="h, i in historyBeforeDevtoolPanelCreated">
                        <san-td>{{h.datetime}}</san-td>
                        <san-td><span class="blue">{{h.event}}</span></san-td>
                        <san-td>
                            <div
                                class="button-wrapper"
                                on-mouseover="highlight(h.id)"
                                on-mouseout="unhighlight()"
                            >
                                <san-button
                                    variants="raised info"
                                    on-click="inspectId(h.id)"
                                >{{h.id}}</san-button>
                            </div>
                            <span>{{h.componentName}}</span>
                        </san-td>
                        <san-td>
                            <san-json-tree-view
                                s-if="!!h.data"
                                data="{{h.data}}"
                                expand="{{!!0}}"
                                rootName="data"
                            >
                            </san-json-tree-view>
                        </san-td>
                    </san-tr>

                </san-tbody>
            </san-table>
        </div>
        <div class="loading-all-wrapper">
            <san-button
                variants="raised info"
                style="display:{{allLoaded ? 'none' : 'block'}};"
                on-click="loadAll"
            >
                Load all history records
            </san-button>
        </div>
    </div>
</template>

<script>
import san, {DataTypes} from 'san';
import Messenger from 'chrome-ext-messenger';

import utils from '../../js/common/utils';

import {Table, THead, TFoot, TBody, TR, TD, TH} from 'san-mui/lib/Table';
import 'san-mui/lib/Table/Table.styl';
import {Button, IconButton} from 'san-mui/lib/Button';
import 'san-mui/lib/Button/Button.styl';
import Icon from 'san-mui/lib/Icon';
import 'san-mui/lib/Icon/Icon.styl';

import SanJsonTreeView from '../components/misc/json_tree_view';

function generateHistoryInfoData(data) {
    if (!data || typeof data !== 'object') {
        return {};
    }
    return {
        datetime: utils.toLocaleDatetime(data.timestamp),
        event: data.message.substring(5),
        data: data.compData,
        componentName: data.componentName,
        id: data.id
    };
}

function getHistoryBeforeDevtoolPanelCreated(callback) {
    let getHistory = () => ({
        history: window[SAN_DEVTOOL].history,
        before: window[SAN_DEVTOOL].historyIndexBeforeDevtoolPanelCreated
    });
    this.pageEval('(' + getHistory.toString() + ')()', (res, ex) => {
        if (!res || typeof res !== 'object' || typeof callback !== 'function') {
            return;
        }
        return callback.bind(this)(res);

        this.before = [];
        for (let [i, h] of res.history.entries()) {
            if (i < res.history.length - res.before | 0) {
                continue;
            }
            this.before.push(generateHistoryInfoData(h));
        }

    });
}

export default {

    components: {
        'san-table': Table,
        'san-tr': TR,
        'san-th': TH,
        'san-td': TD,
        'san-tbody': TBody,
        'san-thead': THead,
        'san-tfoot': TFoot,
        'san-button': Button,
        'san-icon-button': IconButton,
        'san-icon': Icon,
        'san-json-tree-view': SanJsonTreeView
    },

    initData() {
        return {
            allLoaded: false,
            recording: false,
            historyAfterDevtoolPanelCreated: [],
            historyBeforeDevtoolPanelCreated: []
        }
    },

    dataTypes: {
        allLoaded: DataTypes.bool,
        recording: DataTypes.bool,
        historyAfterDevtoolPanelCreated: DataTypes.arrayOf(DataTypes.object),
        historyBeforeDevtoolPanelCreated: DataTypes.arrayOf(DataTypes.object)
    },

    compiled() {
        this.pageEval = chrome.devtools.inspectedWindow.eval;
        this.messenger = new Messenger();
        this.mouseOverConnection = this.messenger.initConnection(
            'history_mouseover', () => {});
        this.mouseOutConnection = this.messenger.initConnection(
            'history_mouseout', () => {});
        this.historyInfoConnection = this.messenger.initConnection(
            'history_info',
            (message, from, sender, sendResponse) => {
                console.log(message);
                this.data.unshift('historyAfterDevtoolPanelCreated',
                    generateHistoryInfoData(message));
            }
        );
    },

    attached() {
        this.watch('recording', value => {
            this.dispatch('UI:history-recording', value);
            if (value) {

            }
        });
    },

    inspectId(id) {
        this.pageEval('inspect(document.getElementById("' + id + '"))|0');
    },

    highlight(id) {
        id && this.mouseOverConnection.sendMessage(
            'content_script:highlight_dom', {id: id}, () => {});
    },

    unhighlight() {
        this.mouseOutConnection.sendMessage(
            'content_script:unhighlight_dom', {}, () => {});
    },

    loadAll() {
        getHistoryBeforeDevtoolPanelCreated.bind(this)(data => {
            this.before = [];
            for (let [i, h] of data.history.entries()) {
                if (i < data.history.length - data.before | 0) {
                    continue;
                }
                //this.before.push(generateHistoryInfoData(h));
                this.data.push('historyBeforeDevtoolPanelCreated', generateHistoryInfoData(h));
            }
            this.data.set('allLoaded', true);
        });
    },

    record() {
        this.data.set('recording', !this.data.get('recording'));
    },

    clear() {

    }

}

</script>

<style lang="stylus">
.blue
    color #2196f3
.sd-history
    thead, tbody
        th, td
            box-sizing border-box
        th:nth-child(1), td:nth-child(1)
            width 170px
        th:nth-child(2), td:nth-child(2)
            width 90px
        th:nth-child(3), td:nth-child(3)
            width 240px
        th:nth-child(4), td:nth-child(4)
            overflow: auto
    td
        span
            margin-left 5px
            font-family 'Consolas'
        .button-wrapper
            display inline-block
            .sm-button
                font-size 12px
                line-height 20px
    .table-head-wrapper
        position absolute
        top 0
        left -5px
        right -5px
        background-color rgba(236, 236, 236, .9)
        z-index 10
        .sm-table
            background transparent
        th
            padding 0 22px
    .table-body-wrapper
        table:nth-child(1)
            margin-top 51px

.loading-all-wrapper
    button
        width 100%
        margin-top 26px

.toolbar
    position absolute
    z-index 10000
    right 5px
    top 5px
    .sm-button
        float right
        margin-left 5px
</style>
