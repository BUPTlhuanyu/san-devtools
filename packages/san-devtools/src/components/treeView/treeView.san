<template>
    <div class="sm-tree-view {{treeViewClass}}">
        <div
            class="sm-tree-view-filter-bar {{treeViewClass}}"
            san-if="filterBar"
        >
            <san-input
                class="component-detail-filter"
                placeholder="{{filterPlaceholder}}, {{totalNums}} components"
                value="{=filterText=}"
                s-ref="filterInputBox"
            >
                <san-icon type="{{filterIcon}}" style="color: rgba(0, 0, 0, .54); font-size: 16px; line-height: 0;" slot="prefix" />
            </san-input>
        </div>
        <div
            class="sm-tree-view-loading-toast {{loading ? 'show' : 'hide'}}"
        >
            <div
                class="sm-tree-view-loading-toast-content"
                style="{{loadingToastContentStyle}}"
            >
                {{loadingToast}}
            </div>
        </div>
        <div class="sm-tree-view-item-wrapper">
            <slot s-if="dataSource!=='JSON'"></slot>
            <san-tree-view-item
                type="{{type}}"
                defaultSelectedIdPath="{{defaultSelectedIdPath}}"
                s-else
                s-for="item, index in treeData"
                s-ref="{{ref}}_{{index}}"
                index="{{index}}"
                ref="{{ref}}_{{index}}"
                componentId="{{item.id}}"
                defaultSelectedIdentity="{{defaultSelectedIdentity}}"
                treeData="{=item=}"
                filterText="{{filterText}}"
                initiallyOpen="{{initiallyOpen}}"
                dataSource="JSON"
            >
            </san-tree-view-item>
        </div>
    </div>
</template>
<script>
import san, {DataTypes} from 'san';
import {Input, Icon} from 'santd';
import TreeViewItem from './treeViewItem.san';
export default {
    dataTypes: {
        compact: DataTypes.bool,
        wholeLineSelected: DataTypes.bool,
        keepingSelected: DataTypes.bool,
        defaultSelectedIdentity: DataTypes.string,
        filterBar: DataTypes.bool,
        filterBarHintText: DataTypes.string,
        dataSource: DataTypes.oneOf(['ATTRIBUTE', 'JSON']),
        highlighted: DataTypes.bool,
        treeData: DataTypes.arrayOf(DataTypes.object),
        loading: DataTypes.bool,
        loadingToast: DataTypes.string,
        loadingAsync: DataTypes.bool,
        progress: DataTypes.number
    },

    components: {
        'san-input': Input,
        'san-icon': Icon,
        'san-tree-view-item': TreeViewItem,
    },

    inited() {
    },

    initData() {
        return {
            compact: false,
            wholeLineSelected: false,
            keepingSelected: false,
            filterBar: false,
            filterBarHintText: '',
            dataSource: 'ATTRIBUTE',
            highlighted: false,
            loading: true,
            loadingToast: '',
            loadingAsync: true,
            loadingToastContentFromColor: 'blue',
            loadingToastContentToColor: 'red',
            progress: 0,
            rootTreeView: true,
            filterText: '',
            totalNumsChange: false
        };
    },

    updated() {
        if (this.data.get('totalNumsChange')) {
            setTimeout(() => {
                let totalNums = this.data.get('totalNums');
                let type = this.data.get('type');
                let curNums = document.querySelectorAll(`.tree-view-type-${type}`).length;
                if (totalNums <= 0 || !curNums) {
                    return;
                }
                let progress = curNums / totalNums * 100;
                this.data.set('progress', progress);
            }, 0);
        }
    },

    attached() {
        this.watch('progress', value => {
            this.data.set('loading', value < 100);
            value === 100 && this.data.set('totalNumsChange', false);
        });
        this.watch('totalNums', value => {
            this.data.set('totalNumsChange', true);
        })
    },

    created() {
        if (!this.data.get('loadingToast')) {
            this.data.set('loading', false);
        }
    },

    messages: {
        'UI:query-compact-attribute'(arg) {
            let compact = this.data.get('compact');
            let target = arg.target;
            target && target.data.set('compact', compact);
            target && target.data.set('rippleMarginLeft', compact ? 16 : 32);
            target && target.data.set('contentMarginLeft', compact ? 22 : 48);
        },
        'UI:query-whole-line-selected-attribute'(arg) {
            arg.target && arg.target.data && arg.target.data.set(
                'wholeLineSelected', this.data.get('wholeLineSelected'));
        },
        'UI:query-keeping-selected-attribute'(arg) {
            arg.target && arg.target.data && arg.target.data.set(
                'keepingSelected', this.data.get('keepingSelected'));
        },
        'UI:record-selected-item'(arg) {
            this.data.set('selectedItem', arg.target);
        },
        'UI:clear-selected-item'(arg) {
            let selectedItem = this.data.get('selectedItem');
            selectedItem && selectedItem.data
                && selectedItem.clearSelectedClass(false);
        },
        'UI:query-data-source-attribute'(arg) {
            let target = arg.target;
            if (target.data.get('dataSource') === undefined) {
                target.data.set('dataSource', this.data.get('dataSource'));
            }
        },
        'UI:query-loading-toast-attribute'(arg) {
            arg.target && arg.target.data && arg.target.data.set(
                'loadingToast', this.data.get('loadingToast'));
        }
    },

    computed: {
        treeViewClass() {
            return this.data.get('compact') ? 'compact ' : '';
        },
        loadingToastContentStyle() {
            let fromColor = this.data.get('loadingToastContentFromColor');
            let toColor = this.data.get('loadingToastContentToColor');
            let progress = this.data.get('progress');
            let leftBound = Math.max(0, progress - 3);
            let rightBound = Math.min(100, progress + 3);
            return {
                'background-image':
                    `linear-gradient(to right, ${fromColor} ${leftBound}%,
                        ${toColor} ${rightBound}%, ${toColor})`
            };
        }
    }
}
</script>
<style lang="less">
@import '@san-devtools/views/style/variables.less';
.sm-tree-view {
    height: 100%;
    background: #fff;
    position: relative;
    .compact {
        padding: 0;
        line-height: normal;
    }
    .sm-tree-view-filter-bar {
        width: 100%;
        height: 36px;
        overflow: hidden;
        z-index: 1000;
        position: absolute;
        padding: 0;
        box-sizing: border-box;
        background-color: hsla(0,0%,93%,.3)!important;
        backdrop-filter: blur(8px);
        .santd-input-affix-wrapper {
                // TODO: 这里挪到misc中的组件一起修改
                height: 36px;
                .santd-input:not(:first-child) {
                    padding-left: 50px;
                }
        }
        .santd-input {
                border: 0;
                border-radius: 0;
                background-color: rgba(0, 0, 0, 0);
        }
        .sm-text-field {
                margin: 0;
                min-height: 40px;
            &.has-icon {
                box-sizing: border-box;
                hr {
                    left: -56px;
                }
            }
            .sm-text-field-icon {
                top: 4px;
            }
            .sm-text-field-content {
                position: relative;
            }
        }
        &.compact {
                .sm-text-field {
                    zoom: 0.85;
                    min-height: auto;
                    margin: 0;
                    .sm-text-field-content {
                        padding: 0;
                    }
                }
        }
    }
    .sm-tree-view-loading-toast {
        position: absolute;
        left: 50%;
        top: 50%;
        transform: translate(-50%, -50%);
        font-size: 150%;
        width: 70%;
        text-align: center;
        overflow: hidden;
        background-color: rgba(192, 192, 192, 0.7);
        pointer-events: none;
        transition: all 0.5s;
        z-index: 1000;
        padding: 10px;
        border-radius: 10px;
        &.show {
            opacity: 1;
        }
        &.hide {
            opacity: 0;
        }
        > .sm-tree-view-loading-toast-content {
            -webkit-text-fill-color: transparent;
            -webkit-background-clip: text;
            background-image: linear-gradient(to right, #000, #000);
        }
    }
    .sm-tree-view-item-wrapper {
        position: relative;
        height: 100%;
        overflow: auto;
        > .sm-tree-view-item:first-child {
            margin-top: 46px;
        }
        .sm-tree-view-item {
            .sm-touch-ripple.selected:hover {
                & ~ .sm-tree-view-item-content.selected {
                    .sm-tree-view-item-primary-text {
                        background-image: linear-gradient(
                            to right,
                            @bg-color-primary-text-selected calc(100% - 46px),
                            transparent
                        );
                    }
                }
            }
            .sm-tree-view-item-content {
                .sm-tree-view-item-primary-text, &:hover {
                    font-family: "Consolas";
                    font-size: 14px;
                    color: #ffa318;
                    width: 100%;
                    text-decoration: none;
                    background-image: linear-gradient(
                        to right,
                        @bg-color-primary-text calc(100% - 44px),
                        transparent
                    );
                    -webkit-background-clip: text;
                    -webkit-text-fill-color: transparent;
                    background-size: calc(100% - 80px) auto;
                    background-repeat-x: no-repeat;
                }
                &.selected {
                    .sm-tree-view-item-primary-text {
                        background-image: linear-gradient(
                            90deg,
                            #fff calc(100% - 40px),
                            transparent
                        );
                    }
                }
                .sm-tree-view-item-extras {
                    top: 50%;
                    left: 50%;
                    transform: translate(-50%, -50%);
                }
            }
        }
    }
}
</style>
