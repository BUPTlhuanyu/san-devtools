<template>
    <div class="ex-panel-panel">
        <div class="ex-panel-wrapper store-button">
            <san-button
                s-if="storeChanged"
                type="primary"
                on-click="refreshStoreData"
            >
                get new store data
            </san-button>
        </div>
        <div class="ex-panel-wrapper" s-if="!!raw">
            <san-collapse defaultActiveKey="{{['1']}}">
                <san-collapse-panel header="Current store state" key='1'>
                    <san-json-tree-view
                        selectedComponentId="{{selectedComponentId}}"
                        alwaysShowRoot="{{!0}}"
                        data="{=raw=}"
                        rootName="raw"
                        readonly="{{true}}"
                        filterText="{{filterText}}"
                    >
                    </san-json-tree-view>
                </san-collapse-panel>
            </san-collapse>
        </div>
        <div class="ex-panel-wrapper" s-if="!!componentIds && !!componentIds.length">
            <san-collapse defaultActiveKey="{{['1']}}">
                <san-collapse-panel header="components" key='1'>
                    <div class="component-wrapper">
                        <div
                            class="components"
                            s-for="item, index in componentIds"
                            on-mouseover="highlightNativeNode(item)"
                            on-mouseout="unhighlightNativeNode"
                        >
                            <span class="component-id">{{ item }}</span>
                        </div>
                    </div>
                </san-collapse-panel>
            </san-collapse>
        </div>
        <div class="ex-panel-wrapper" s-if="!!actions && !!actions.length">
            <san-collapse>
                <san-collapse-panel header="actions" key='1'>
                    <div class="actions-wrapper">
                        <div class="actions" s-for="item, index in filteredActions">
                            <div class="func-name">{{item.name}}</div>
                            <san-pretty-code fnStr="{{item.fn}}"></san-pretty-code>
                        </div>
                    </div>
                </san-collapse-panel>
            </san-collapse>
        </div>
    </div>
</template>

<script>
import san, {DataTypes} from 'san';
import {connectStore, store} from '@san-devtools/store/index';
import JSONView from 'json-tree-view';
import 'json-tree-view/devtools.css';

import {Collapse, Button, Message} from 'santd';

import JsonTreeView from '@san-devtools/components/misc/jsonTreeView.san';
import PrettyCode from '@san-devtools/components/prettyCode/prettyCode.san';

export default connectStore({
    raw: 'storeData.raw',
    actions: 'storeData.actions',
    components: 'storeData.components',
    storeName: 'selectedMutationInfo.storeName',
    bridge: 'bridge',
    storeChanged: 'storeChanged',
    activeTab: 'activeTab',
})(
    {
        refreshStoreData() {
            this.data.get('bridge') && this.data.get('bridge').send('Store.getStoreData', this.data.get('storeName'));
        },
        highlightNativeNode(componentId) {
            this.data.get('bridge') && this.data.get('bridge').send('Inspect.highlight', componentId);
        },
        unhighlightNativeNode() {
            this.data.get('bridge') && this.data.get('bridge').send('Inspect.unhighlight', '');
        },
        computed: {
            componentIds(){
                let components = this.data.get('components');
                return components ? Object.keys(components) : [];
            },
            filteredActions() {
                let actions = this.data.get('actions') || [];
                let filterText = this.data.get('filterText');
                let filteredActions = actions.filter(item => JSON.stringify(item).indexOf(filterText) > -1);
                return filteredActions;
            }
        },
        components: {
            'san-json-tree-view': JsonTreeView,
            'san-collapse': Collapse,
            'san-collapse-panel': Collapse.Panel,
            'san-pretty-code': PrettyCode,
            'san-button': Button
        },

        created() {
            let messageOpen = false;
            this.watch('storeChanged', storeChanged => {
                if (storeChanged && this.data.get('activeTab') === 'store' && !messageOpen) {
                    messageOpen = true;
                    Message.info(
                        'store has changed',
                        0.5,
                        () => {
                            messageOpen = false;
                        }
                    );
                }
            });
            this.watch('activeTab', activeTab => {
                if (activeTab !== 'store') {
                    Message.destroy()
                }
            })
        },

        dataTypes: {

        }
    }
)

</script>

<style lang="less">
.store-button {
    display: flex;
    justify-content: center;
    align-items: center;
    .santd-btn-primary {
        background-color: #3898b9;
    }
}
.actions-wrapper {
    .actions {
        margin: 3px 0;
        .func-name {
            color: #3898b9;
            font-size: 120%;
            border-bottom: 2px solid #3898b9;
            margin-bottom: 5px;
        }
    }
}
.component-wrapper {
    .components {
        display: inline-block;
        white-space: nowrap;
        margin-right: 20px;
        span {
            padding: 3px;
            border-radius: 5px;
            color: #fff;
            cursor: pointer;
            &.component-id {
                background-color: rgba(255, 163, 24, 0.5);;
            }
        }
    }
}
.hidden {
    display: none;
}
</style>
