<template>
    <div>
        <san-devtools-table
            data="{{data}}"
            readonly="{{true}}"
            columns="{{columns}}"
            bridgeOptions="{{bridgeOptions}}"
            on-clear="clearHandler"
            on-filter="doFilter"
            on-loadBefore="loadBefore"
            filterPlaceholder="eg: A.attached"
            searchTip="Use '.' as separator for search, like: [componentName].[lifecycle]"
            beforeLoaded="{{true}}"
        >
        </san-devtools-table>
        <sand-loading 
            loadingToastContentFromColor="{{loadingToastContentFromColor}}"
            loadingToastContentToColor="{{loadingToastContentToColor}}"
            loadingToast="{{loadingToast}}"
            progress="{{progress}}"
            loading="{{loading}}"
        />
    </div>
</template>
<script>
import san, {DataTypes} from 'san';
import {connectStore, store} from '@san-devtools/store/index';
import DevtoolsTable from '@san-devtools/components/misc/devtoolsTable.san';
import SdLoading from '@san-devtools/components/loading/loading.san';
function filterData(filterText, data) {
    filterText = filterText.trim();
    if (!filterText) {
        return data;
    }
    let filterKeys = filterText.split('.');
    let newData = data.filter(item => {
        let {component = {}, event} = item;
        let testStr = `${component.componentName}.${event}`;
        let match = false;
        return filterKeys.every(str => testStr.includes(str));
    });
    return newData;
}
export default connectStore({
    bridge: 'bridge',
    historyRecordings: 'historyRecordings',
    historyLengthBeforeDevtoolCreated: 'historyLengthBeforeDevtoolCreated'
})(
    {
        components: {
            'san-devtools-table': DevtoolsTable,
            'sand-loading': SdLoading
        },
        clearHandler() {
            store.dispatch('clearHistory');
        },
        doFilter(filterText) {
            this.data.set('filterText', filterText);
            let data = this.data.get('historyRecordings');
            let newData = filterData(filterText, data);
            this.data.set('data', newData);
        },
        computed: {
            data() {
                let beforeLoaded = this.data.get('beforeLoaded');
                let historyRecordings = this.data.get('historyRecordings') || [];
                let historyLengthBeforeDevtoolCreated = this.data.get('historyLengthBeforeDevtoolCreated');
                let newData;
                if (beforeLoaded) {
                    // 展示数据
                    if (historyLengthBeforeDevtoolCreated) {
                        newData = historyRecordings;
                    } else {
                        this.data.get('bridge').send('History.historyRecording', {recording: this.data.get('recording'), loadBefore: true});
                    }
                } else {
                    // 隐藏
                    newData = historyRecordings.slice(historyLengthBeforeDevtoolCreated);
                }
                let filterText = this.data.get('filterText');
                return filterData(filterText, newData);
            }
        },
        initData() {
            return {
                progress: 0,
                loadingToast: 'Building history tree... ',
                loading: false, // TODO：假的 loading
                loadingToastContentFromColor: 'rgba(0, 175, 255, 1)',
                loadingToastContentToColor: '#fff',
                filterText: '',
                beforeLoaded: false,
                recording: false,
                bridgeOptions: {
                    bridgeName: 'History',
                    bridgeActionName: 'fire',
                    bridgeRecording: 'historyRecording'
                },
                columns: [
                    {
                        title: 'Timestamp',
                        dataIndex: 'time',
                        width:  '20%'
                    },
                    {
                        title: 'Event',
                        dataIndex: 'event',
                        scopedSlots: {render: 'event'},
                        width:  '10%'
                    },
                    {
                        title: 'Component',
                        dataIndex: 'component',
                        scopedSlots: {render: 'component'},
                        width:  '20%'
                    },
                    {
                        title: 'Data',
                        dataIndex: 'payload',
                        scopedSlots: {render: 'payload'},
                        width:  '50%'
                    }
                ],
                tableHeight: 0
            }
        },
        dataTypes: {
            beforeLoaded: DataTypes.bool,
            recording: DataTypes.bool,
            historyAfterDevtoolPanelCreated: DataTypes.arrayOf(DataTypes.object),
            historyBeforeDevtoolPanelCreated: DataTypes.arrayOf(DataTypes.object)
        },
        attached() {
            this.watch('historyRecordings', value => {
                this.data.set('progress', 90);
                this.data.set('loading', true);
            });
        },
        updated() {
            setTimeout(() => {
                this.data.set('progress', 0);
                this.data.set('loading', false);
            }, 0);
        },
        loadBefore() {
            let loadBefore = this.data.get('beforeLoaded');
            if (!loadBefore) {
                this.data.set('loading', true);
                // 假的
                setTimeout(() => {
                    if (this.data.get('loading')) {
                        this.data.set('loading', false);
                    }
                }, 1000);
            }
            this.data.set('beforeLoaded', !loadBefore);
        }
    }
)
</script>
<style lang="less">
</style>